import java.time.ZonedDateTime

plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.24"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.9.24"
    id("com.google.devtools.ksp") version "1.9.24-1.0.20"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.0"
    id("io.micronaut.aot") version "4.4.0"
    id('org.openapi.generator') version "5.4.0"
    id 'maven-publish'
    id("org.jetbrains.kotlinx.kover") version "0.8.1"
    id 'jacoco'

}
version = "0.1"
group = "com.sel2in.kotlinDefaultsJson"
repositories {
    mavenCentral()
}

//TBD TODO later. whether we need this?
//sourceSets.test.java.srcDirs += "${project.buildDir}/generated/openapi/src/main/java"
dependencies {
    ksp("io.micronaut:micronaut-http-validation")
    ksp("io.micronaut.serde:micronaut-serde-processor")
    ksp("io.micronaut.validation:micronaut-validation-processor")

    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")

    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")

    implementation("io.micronaut.serde:micronaut-serde-jackson")
    //implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    //implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compileOnly("io.micronaut:micronaut-http-client")

    //implementation("io.micronaut.validation:micronaut-validation")
    //implementation("jakarta.validation:jakarta.validation-api:3.0.0")

    runtimeOnly("ch.qos.logback:logback-classic")
    //runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    testImplementation("io.micronaut:micronaut-http-client")

    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut:micronaut-runtime")

    implementation 'io.swagger:swagger-annotations:1.6.14'
//    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
//    implementation 'com.google.code.findbugs:jsr305:3.0.2'
//    implementation 'com.google.code.gson:gson:2.10.1'
//    implementation 'io.gsonfire:gson-fire:1.9.0'
//    implementation 'org.threeten:threetenbp:1.6.9'
//    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
//    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation("io.micronaut:micronaut-http")
    //implementation("io.micronaut:micronaut-inject")

//    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
//    implementation("software.amazon.awssdk:dynamodb-enhanced:${awsSDKVersion}")

    runtimeOnly("org.yaml:snakeyaml")

    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0-M2'
    //testRuntimeOnly 'io.micronaut.test:micronaut-test-junit5:4.3.0'


    ///testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.0-M2'
    //testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation("io.micronaut.test:micronaut-test-junit5")
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

kotlin {
    jvmToolchain(21)
}


subprojects {
    apply(plugin = "org.jetbrains.kotlinx.kover")
    apply(plugin = 'jacoco')

    // Kover configuration
    kover {
        filters {
            classes {
                excludes += listOf("com.sel2in.kotlinDefaultsJson.app.App")
            }
        }
        annotations {
            excludes += listOf("*Generated", "*CustomAnnotationToExclude")
        }
    }

    // JaCoCo configuration
    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        dependsOn test // Ensure tests run before generating the report
        reports {
            xml.required.set(false)
            csv.required.set(true)
            html.required.set(true)
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['com/sel2in/kotlinDefaultsJson/app/App.class',
                                            'com/sel2in/kotlinDefaultsJson/app/App$*.class' // for any inner classes
                ])
            }))
        }
    }

    tasks.test {
        finalizedBy(jacocoTestReport)
        finalizedBy(tasks.koverHtmlReport, tasks.koverXmlReport)
    }
}


tasks.jacocoTestReport {
    dependsOn test // Ensure tests run before generating the report
    reports {
        xml.required.set(false)
        csv.required.set(true)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/sel2in/kotlinDefaultsJson/app/App.class',
                                        'com/sel2in/kotlinDefaultsJson/app/App$*.class' // for any inner classes
            ])
        }))
    }
}

// Ensure Kover reports are generated
tasks.test {
    finalizedBy(tasks.koverHtmlReport, tasks.koverXmlReport)
}

// Application configuration
application {
    mainClass = "com.sel2in.kotlinDefaultsJson.App"
}

java {
    sourceCompatibility = JavaVersion.toVersion("21")
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

kotlin {
    jvmToolchain(21)
}
